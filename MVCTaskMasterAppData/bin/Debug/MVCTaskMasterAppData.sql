/*
Deployment script for MVCTaskMasterAppData

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MVCTaskMasterAppData"
:setvar DefaultFilePrefix "MVCTaskMasterAppData"
:setvar DefaultDataPath "C:\Users\Angelo''s Tower PC\AppData\Local\Microsoft\VisualStudio\SSDT\ASP.NetMVCExample"
:setvar DefaultLogPath "C:\Users\Angelo''s Tower PC\AppData\Local\Microsoft\VisualStudio\SSDT\ASP.NetMVCExample"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[UsersUpdateAntiNull]...';


GO
--	  Writer: Angelo Sanches (BitSan)(Git:TheTrueTrooper)
--    Date Writen: Sep 14, 2017
--    Project Goal: Make a cloud based app to aid in project management
--    File Goal: To Create a table to aid in the verif of accounts that is a normalized drop away 
--    Link: https://github.com/TheTrueTrooper/AngelASPExtentions
--    Sources/References:
--      {
--      Name: NA
--      Writer/Publisher: NA
--      Link: NA
--      }
ALTER TRIGGER [UsersUpdateAntiNull]
	ON [dbo].[Users]
	for Update
	AS
	BEGIN
		if exists(select UserID from inserted where [PrimaryPersonalEmailID] = null or [PrimaryPhoneID] = null)
		begin
			raiserror('Update has faild due to Trigger Constraint Violation at UsersUpdateAntiNull due to setting either [PrimaryPersonalEmailID] or [PrimaryPhoneID] null Rolling back now', 15, 0)
			rollback
		end
	END
GO

-- drop all errors at first to allow for drops--------------------
delete from ErrorTable
where 1=1 
GO

--------------------------------------------------------<Table Table work begins
--create a Pseudo Enum to use afte droping the poten of it
--if exists(select 	[name] from sysobjects where [name] = 'PseudoConstants_ErrorTables')
--	drop view [dbo].[PseudoConstants_ErrorTables]
--go
--CREATE VIEW [dbo].[PseudoConstants_ErrorTables]
--as
--SELECT
--	CAST(0 AS tinyint) AS [Uknown],
--	CAST(1 AS tinyint) AS [Users],
--	CAST(2 AS tinyint) AS [Companys],
--	CAST(3 AS tinyint) AS [Roles]
--go


Declare @Table nvarchar(20)

delete from MYTableList
where 1=1 

set IDENTITY_INSERT MYTableList on
set @Table = 'Unknown'
if not exists(select TableName from MYTableList where @Table = TableName) 
insert into MYTableList (TableID, TableName) values (0, @Table) 
set IDENTITY_INSERT MYTableList off

set @Table = 'Users'
if not exists(select TableName from MYTableList where @Table = TableName) 
insert into MYTableList (TableName) values (@Table) 

set @Table = 'Companys'
if not exists(select TableName from MYTableList where @Table = TableName) 
insert into MYTableList (TableName) values (@Table) 

set @Table = 'Roles'
if not exists(select TableName from MYTableList where @Table = TableName) 
insert into MYTableList (TableName) values (@Table) 

select * from MYTableList order by TableID
GO

--------------------------------------------------------<Operation Table work begins
--create a Pseudo Enum to use afte droping the poten of it
--if exists(select 	[name] from sysobjects where [name] = 'PseudoConstants_OperationTypes')
--	drop view [dbo].[PseudoConstants_OperationTypes]
--go
--CREATE VIEW [dbo].[PseudoConstants_OperationTypes]
--as
--SELECT
--	CAST(0 AS tinyint) AS [Uknown],
--	CAST(1 AS tinyint) AS [Insert],
--	CAST(2 AS tinyint) AS [Delete],
--	CAST(3 AS tinyint) AS [Update],
--	CAST(4 AS tinyint) AS [Select],
--	CAST(5 AS tinyint) AS [Other]
--go


Declare @Type char(6)

delete from OperationTypes
where 1=1 

set IDENTITY_INSERT OperationTypes on
set @Type = 'Unknown'
if not exists(select [OperationType] from OperationTypes where @Type = [OperationType]) 
insert into OperationTypes (OperationTypeID, [OperationType]) values (0, @Type) 
set IDENTITY_INSERT OperationTypes off

set @Type = 'Insert'
if not exists(select [OperationType] from OperationTypes where @Type = [OperationType]) 
insert into OperationTypes ([OperationType]) values (@Type) 

set @Type = 'Delete'
if not exists(select [OperationType] from OperationTypes where @Type = [OperationType]) 
insert into OperationTypes ([OperationType]) values (@Type) 

set @Type = 'Update'
if not exists(select [OperationType] from OperationTypes where @Type = [OperationType]) 
insert into OperationTypes ([OperationType]) values (@Type) 

set @Type = 'Select'
if not exists(select [OperationType] from OperationTypes where @Type = [OperationType]) 
insert into OperationTypes ([OperationType]) values (@Type) 


select * from OperationTypes order by OperationTypeID
GO



--some tools if you mess up the table
--DBCC CHECKIDENT('MYTableList', RESEED, 2) -- resets the ID counter to the number note: adds before setting it
--delete from MYTableList where TableID > 2
GO

GO
PRINT N'Update complete.';


GO
